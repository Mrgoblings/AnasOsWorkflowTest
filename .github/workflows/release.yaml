name: Release

on:
  pull_request:
    branches: [ "main" ]
    types: [closed]
    tags: 
      - "v*"
  workflow_dispatch:
    inputs:
      tag_version:
        description: 'Tag version for manual release'
        required: false
        default: 'v0.0.0'

permissions:
  contents: write
  pull-requests: read

jobs:
  create-release:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout with GitHub
        uses: actions/checkout@v3

      - name: Get highest release version
        id: get_version
        run: |
          # Sort tags by version and pick the highest; if no tags are found, use v0.0.0
          TAG=$(git tag --list 'v*' | sort -V | tail -n 1 || echo "v0.0.0")
          echo "version=$TAG" >> $GITHUB_ENV

      - name: Determine version increment
        id: determine_increment
        run: |
          pr_title="${{ github.event.pull_request.title }}"
          if [[ "$pr_title" == *"[Major]"* ]]; then
            echo "::set-output name=increment::major"
          elif [[ "$pr_title" == *"[Minor]"* ]]; then
            echo "::set-output name=increment::minor"
          elif [[ "$pr_title" == *"[Patch]"* ]]; then
            echo "::set-output name=increment::patch" 
          else # Defaults to minor
            echo "::set-output name=increment::minor"
          fi


      - name: Increment version
        id: increment_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          tag_prefix: "v"
          version_type: ${{ steps.determine_increment.outputs.increment }}

      - name: Check new version
        run: echo "New version is ${{ steps.increment_version.outputs.version }}"

      - name: Create Release
        id: release-action
        uses: ncipollo/release-action@v1
        with:
          tag: "${{ env.version }}"
          name: Release ${{ steps.increment_version.outputs.version }}
          commit: ${{ github.sha }}
          body: ${{ github.event.pull_request.body }}

      - name: Output Release URL File
        run: |
          echo "${{ steps.release-action.outputs.upload_url }}" > release_url.txt

      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt

  build:
    name: Build packages
    needs: create-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout with GitHub
        uses: actions/checkout@v4

      - name: Install additional dependencies
        run: |
          sudo apt update
          sudo apt install -y nasm grub-pc-bin grub-common make
          rustup target add x86_64-unknown-none

      - name: Build project
        run: make no-run

      - name: Archive build output
        run: |
          zip -r AnasOS.iso.zip AnasOS.iso

      - name: Load Release URL File from release job
        id: download_release_info
        uses: actions/download-artifact@v4
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        shell: bash
        run: |
          value=`cat "${{steps.download_release_info.outputs.download-path}}/release_url.txt"`
          echo ::set-output name=upload_url::$value

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: AnasOS.iso.zip
          asset_name: AnasOS.iso.zip
          asset_content_type: application/zip